%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.3 (Build 19D76) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 509 68
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 509 68
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.27058825 0.30980393 0.35686275 sc
q
376.54544 14.266666 m
376.54544 11.422222 374.99844 10 372.27274 10 c
369.54703 10 368 11.422222 368 14.266666 c
368 17.111111 369.54703 18.533333 372.27274 18.533333 c
374.99844 18.533333 376.54544 17.111111 376.54544 14.266666 c
h
405.04941 17.129456 m
406.98865 12.926829 l
404.37811 11.20075 399.45541 10 394.7565 10 c
382.3006 10 377.07956 18.105066 377.07956 29.662289 c
377.07956 43.996246 385.13486 50 396.2482 50 c
401.61844 50 405.42233 48.574108 406.83948 47.973732 c
406.83948 38.742966 l
403.03555 38.968105 l
402.14053 43.9212 l
402.06595 44.371483 401.99136 44.671669 401.32007 44.896809 c
400.27588 45.272045 397.96368 45.647278 395.65152 45.647278 c
388.1929 45.647278 382.3006 41.369606 382.3006 29.88743 c
382.3006 19.080675 387.44702 14.502814 395.42776 14.502814 c
399.15707 14.502814 402.58804 15.553471 405.04941 17.129456 c
h
426.82791 10 m
414.26944 10 409.125 18.405252 409.125 30.187616 c
409.125 41.894936 415.02597 50 427.58444 50 c
440.06726 50 444.90909 41.894936 444.90909 30.712946 c
444.90909 18.180113 439.31073 10 426.82791 10 c
h
427.0545 13.733334 m
435.29706 13.733334 439.56818 19.215593 439.56818 29.804615 c
439.56818 40.093239 435.67172 45.200001 427.42917 45.200001 c
419.11169 45.200001 414.46591 40.018139 414.46591 29.729515 c
414.46591 19.440891 418.73703 13.733334 427.0545 13.733334 c
h
509 10.533334 m
493.14835 10.533334 l
493.14835 13.896097 l
497.05493 14.344466 l
498.10669 14.493922 498.25696 14.643378 498.25696 15.764299 c
498.25696 33.699039 l
498.25696 41.097122 496.90466 44.908253 491.04483 44.908253 c
486.53726 44.908253 482.33017 42.516956 479.55051 40.499298 c
479.77588 39.079464 479.85101 37.435444 479.85101 35.641972 c
479.85101 15.839027 l
479.85101 14.643378 479.92615 14.493922 481.05304 14.344466 c
484.95959 13.821369 l
484.95959 10.533334 l
469.93436 10.533334 l
469.93436 13.896097 l
473.61554 14.344466 l
474.6673 14.493922 474.81754 14.643378 474.81754 15.764299 c
474.81754 34.072681 l
474.81754 41.47076 473.91605 44.908253 468.35669 44.908253 c
462.72223 44.908253 457.98926 41.321304 455.81061 39.303646 c
455.81061 15.839027 l
455.81061 14.643378 455.88574 14.493922 457.01263 14.344466 c
461.5202 13.821369 l
461.5202 10.533334 l
445.66855 10.533334 l
445.66855 13.896097 l
449.57513 14.344466 l
450.62689 14.493922 450.77716 14.718106 450.77716 15.839027 c
450.77716 42.591682 l
450.77716 43.413692 450.55176 43.936787 449.80051 44.160973 c
445.44318 45.580807 l
446.04419 48.719387 l
454.53345 48.719387 l
455.13446 44.086243 l
455.35986 44.011517 l
458.44003 46.402817 463.17297 49.466667 469.48358 49.466667 c
474.36679 49.466667 476.99622 47.747921 478.42361 44.609341 c
482.02966 47.150097 486.53726 49.466667 492.17172 49.466667 c
500.96149 49.466667 503.29041 43.936787 503.29041 35.26833 c
503.29041 15.839027 l
503.29041 14.643378 503.36554 14.493922 504.49243 14.344466 c
509 13.821369 l
509 10.533334 l
h
W*
0 0 509 68 rc
363 55 m
514 55 l
514 5 l
363 5 l
h
f
Q
q
87.98111 50.86179 m
99.453003 50.86179 104.05726 47.729675 104.05726 37.040134 c
104.05726 37.040134 l
104.05777 18.331604 l
104.06586 17.249964 104.18242 17.104404 105.26491 16.958136 c
105.26491 16.958136 l
108.33543 16.440386 l
108.33543 23.219254 l
116.41148 22.608356 l
117.16722 18.256001 l
117.24088 17.569033 117.39356 17.263195 118.07258 17.111053 c
118.97793 16.805216 121.01574 16.347237 123.88448 16.347237 c
127.88338 16.347237 130.14752 17.492186 130.14752 20.317684 c
130.14752 23.372171 127.1284 24.28813 123.27989 24.975876 c
116.94089 26.120823 108.6385 27.494761 108.6385 37.498112 c
108.6385 46.966637 116.63783 50.86179 125.31693 50.86179 c
131.27922 50.86179 137.09113 49.486298 139.2049 48.647186 c
139.2049 48.647186 l
139.2049 37.574959 l
131.12885 38.109009 l
130.37387 42.080231 l
130.29944 42.691132 130.14752 42.996189 129.62042 43.149109 c
128.63911 43.45417 126.82764 43.760006 124.78983 43.760006 c
121.01574 43.760006 118.90197 42.309223 118.90197 39.865631 c
118.90197 36.735073 123.05355 36.048103 127.65704 34.978451 c
133.61932 33.604511 140.33736 31.465982 140.33736 22.532284 c
140.33736 13.216679 132.86589 9.3983736 123.27989 9.3983736 c
117.07362 9.3983736 111.00468 10.892628 108.88785 11.85749 c
108.88785 11.85749 l
108.88785 10.315108 l
94.999893 10.315108 l
94.244156 14.438474 l
93.867432 14.514544 l
91.000229 11.689046 87.226135 9.3983736 81.187889 9.3983736 c
71.67939 9.3983736 70.168678 15.964553 70.168678 20.699593 c
70.168678 28.335424 74.848885 31.847891 84.282974 32.45879 c
84.282974 32.45879 l
92.962082 33.068909 l
92.962082 37.269123 l
92.962082 40.858437 92.585365 43.30125 87.905151 43.30125 c
84.282974 43.30125 82.395538 42.7672 82.395538 38.185081 c
82.395538 38.185081 l
71.753044 39.102592 l
71.753044 49.410229 81.037514 50.86179 87.98111 50.86179 c
h
359.18478 68 m
359.18478 18.337355 l
359.18478 17.190954 359.26053 17.037945 360.38879 16.885712 c
360.38879 16.885712 l
364 16.350569 l
364 10.314874 l
350.00494 10.314874 l
349.25302 14.593686 l
348.72598 14.670579 l
345.56607 11.538168 341.87915 9.3983736 336.38623 9.3983736 c
327.50772 9.3983736 321.78915 15.128829 321.78915 29.721371 c
321.78915 45.078182 329.38715 50.885529 337.74014 50.885529 c
342.1048 50.885529 345.49036 49.357769 348.3504 47.217976 c
348.3504 47.217976 l
348.3504 58.831116 l
348.3504 59.595387 348.04901 60.129749 347.37207 60.358875 c
347.37207 60.358875 l
343.23306 61.811295 l
344.05994 68 l
359.18478 68 l
h
157.95947 50.86179 m
162.91664 50.86179 167.76428 49.921768 170.49744 49.121468 c
170.49744 49.121468 l
170.68875 50.097195 l
189.88795 50.097195 l
189.88795 43.760006 l
185.63817 43.30125 l
191.70929 21.845316 l
192.2408 21.845316 l
198.99307 49.105167 l
210.45258 49.105167 l
216.9796 21.845316 l
217.43474 21.845316 l
223.12553 43.30125 l
218.80016 43.760006 l
219.78526 50.097195 l
235.72289 50.097195 l
235.72289 48.097561 l
234.77789 46.700336 233.9463 44.970158 233.23042 43.425449 c
233.23042 43.425449 l
232.98973 43.378098 l
231.92825 43.225182 231.47311 42.843273 231.1684 41.850468 c
231.1684 41.850468 l
221.83571 10.315108 l
209.8447 10.315108 l
203.92633 35.894409 l
203.47119 35.894409 l
197.47646 10.315108 l
183.81685 10.315108 l
174.25504 41.926537 l
173.95264 42.843273 173.57156 42.996189 172.66127 43.225182 c
172.66127 43.225182 l
171.92302 43.384308 l
171.92302 37.574959 l
163.80301 38.109009 l
163.04393 42.080231 l
162.9691 42.691132 162.81636 42.996189 162.28639 43.149109 c
161.29974 43.45417 159.47841 43.760006 157.4295 43.760006 c
153.63487 43.760006 151.5096 42.309223 151.5096 39.865631 c
151.5096 36.735073 155.68378 36.047329 160.31232 34.978451 c
166.30705 33.604511 173.06165 31.465982 173.06165 22.532284 c
173.06165 13.215902 165.54951 9.3983736 155.91135 9.3983736 c
149.00555 9.3983736 142.25174 11.231067 140.88554 12.147025 c
140.88554 12.147025 l
140.88554 23.219254 l
149.00555 22.608356 l
149.76541 18.256001 l
149.83946 17.569033 149.99298 17.263195 150.67569 17.111053 c
151.58597 16.805216 153.63487 16.347237 156.51923 16.347237 c
160.53989 16.347237 162.81636 17.492186 162.81636 20.317684 c
162.81636 23.372171 159.78081 24.28813 155.91135 24.975876 c
149.53706 26.120823 141.19026 27.494761 141.19026 37.498112 c
141.19026 46.966637 149.23312 50.86179 157.95947 50.86179 c
h
53.041996 65.78862 m
67.031944 65.78862 71.26506 58.304787 71.26506 49.523842 c
71.26506 36.237541 63.326916 30.892282 50.546864 30.892282 c
50.546864 30.892282 l
45.026985 30.892282 l
45.026985 18.674877 l
45.026985 17.452282 45.103085 17.300137 46.237652 17.147217 c
46.237652 17.147217 l
57.049885 16.536306 l
57.049885 10.504066 l
0.88526088 10.504066 l
0.88526088 16.509981 l
7.3830652 17.043257 l
8.4417048 17.118998 8.5922804 17.422731 8.5922804 18.562704 c
8.5922804 18.562704 l
8.5922804 44.817749 l
8.5922804 45.906784 7.7766824 45.7271 2.0961027 43.794765 c
2.0961027 43.794765 0 50.029449 0 50.029449 c
0 50.029449 l
12.983013 57.495934 l
20.003002 57.495934 l
20.003513 18.409666 l
20.011616 17.327454 20.128359 17.115704 21.212986 17.043257 c
21.212986 17.043257 l
27.409639 16.509981 l
27.409639 16.536306 l
32.173141 17.071144 l
33.230843 17.223288 33.383041 17.452282 33.383041 18.598028 c
33.383041 18.598028 l
33.383041 57.617805 l
33.383041 58.762775 33.230843 59.069393 32.173141 59.145466 c
32.173141 59.145466 l
27.409639 59.679527 l
27.409639 65.78862 l
h
315.71399 51.96748 m
317.46408 51.96748 320.96655 51.654728 322.33734 51.264187 c
322.33734 51.264187 l
322.33734 37.053032 l
313.20148 37.36499 l
312.43909 41.503792 l
312.28735 42.207085 312.05902 42.362667 311.4491 42.362667 c
309.46991 42.362667 307.10989 40.644917 305.96741 39.629662 c
305.96741 39.629662 l
305.96793 18.780066 l
305.9761 17.668552 306.09372 17.451004 307.18652 17.375076 c
307.18652 17.375076 l
314.72324 16.751162 l
314.72324 10.504066 l
289.82428 10.504066 l
289.82428 16.828953 l
293.25244 17.29808 l
294.3175 17.454456 294.46924 17.688623 294.46924 18.859457 c
294.46924 18.859457 l
294.46924 41.738754 l
294.46924 42.596836 294.24088 43.143753 293.4808 43.377922 c
293.4808 43.377922 l
289.81808 44.69878 l
289.69968 44.952793 289.5704 45.199661 289.44577 45.449703 c
289.44577 45.449703 l
290.20667 51.186394 l
303.60663 51.186394 l
304.52075 44.94009 l
304.97745 44.94009 l
307.48993 48.921722 310.8407 51.96748 315.71399 51.96748 c
h
93.192772 26.536585 m
87.902512 26.16481 l
83.314453 25.867844 81.680725 24.753273 81.680725 21.779827 c
81.680725 18.805626 83.547737 17.691057 86.114578 17.691057 c
88.759705 17.691057 91.404839 19.104105 93.192772 20.366779 c
93.192772 20.366779 l
93.192772 26.536585 l
h
341.61679 41.463413 m
336.0358 41.463413 333.8494 36.278229 333.8494 29.590504 c
333.8494 22.301607 335.95914 18.243902 340.71143 18.243902 c
343.27576 18.243902 346.06625 19.746445 348.10242 21.475094 c
348.10242 21.475094 l
348.10242 39.208454 l
346.21652 40.48642 343.80243 41.463413 341.61679 41.463413 c
h
49.950233 56.943089 m
45.5 56.943089 l
45.5 39.252033 l
49.484608 39.252724 l
54.404076 39.28495 59.753014 40.471287 59.753014 48.648308 c
59.753014 55.696075 55.30278 56.943089 49.950233 56.943089 c
49.950233 56.943089 l
h
W*
0 0 509 68 rc
-5 73 m
369 73 l
369 4.3983741 l
-5 4.3983741 l
h
f
Q
q
0 0 509 68 rc
64 0 0 64 229 0 cm
BI
/Width 192
/Height 192
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcCQ+rqZQ_!9O=Ek5O6:g]#k)ec*tqcMl#daSs-T_>_CPaSsB^cMl5jec+5#g]$(/k5OlLq18Res2"_d
s.02hrVlHglMfcAfDa%o_tq-Z^]).Mc2Q>oiVr-Ao`"i@s5!^ks+13Ls8N#snG_AFci1cE^SnpH_>_d[
i;W6Frdk+6s2"_ds0D\(o)@YJdJh#<^RW(<_Z%s^ir8M"s763+s+13as8MurlMf<4_pH/[^]).MeGeb4
rIP"Js2"_ds2=s:nG_,?_oKNI^]).Mg&CJos2"_ds3:TCpAWtKaM,E?^])"IaSt)rp5T*gs+14$s8N#s
kPic7^Oa/m^])OXkPkIHs2"_ds4mYRrVkmWa037/^[Jr:a8Y0!rLEo(s+140s8Mrqir6or^Oa/a^])4O
ir8kMs2"_ds60L^qu5LP`1t(u^Z3*.`;\Znql'P2s+14<s8Mrqh>Y<_^Oa/U^]).Mh>[>Ts2"_ds7--g
l2J\h^Oa/O^])7Pl*:9)s+14Es8M]jd#l(o^X9gqd/N^Is2"_ds8DusrVkXP_2c9]^WsUn_>`9irOr6I
s+11Ms8M?`a,%K]^W=1ha8YD?s2"_is8Mopdt5>c^V[bbe,K6as2"_ls8M]jaaq2-^V>?7^VBcirq4D5
_>fJorpB^&J\V,tJ\Sk4rkna&bl>NZO8o4>rkO*"q7hKq\\J-Zro;?)_>ff#rr2oLJ\UfkJ\SP+rn.5L
ec3JcR/d0^rm$)0n@sOhYeU1_rqb:I_>g#)rq$-0J\UTeJ\S>%rl>$0g],+iT)\fUrka6$lG%nbWk\PM
rp/G@_>g5/ro!dkJ\UB_J\S+trkSNkiW$aoVuQbprmcS7iP0rYTtgTWrr)$[_>gP8rqQK:J\U'VJ\Rek
rlkB:lMn^#XoJCjrl'H'gV8<SS%nsArpfCU_>gb>rpg!(J\TjPJ\RSerk\U(nGg?)ZiC%"rl'H'e\?[M
Q,!=;rqQ*b_>gtDrr)i?J\TXJJ\RA_rlkB?pA_u/[f??WJ\TOGJ\R8\rmg`B_>h(Grnr@BbeJ_DN5,AM
q>\;2]`7usrkO*"beJ_DN5,A-rp0L^_>h:Mrq$-+J\T=AJ\R&Vrke[+!WW29s2+g8qYnNd^W+$>^P9N&
`rZ&5!;aS4`W,r:rm$)0_nUc;K>.H4c2c/hrl+oVs8LZ%^VIU8^Oa-"^])m)s2b6>j+4tY^Oa.N^\tqH
j5^.Xe(33<S>2C?UR%FFQCO_9S>2C?UR%FFQCO_ns8MEb^k'86^Oa.N^\tqH_#E``ru.H'WC9Te78I,V
:Kp7`>=D=l78I,V:Kp7`>L*9Jp&;j[^Uh12^Oa/r^]).Mp$)JpKo;-`:Kp7`>=D=l78I,V:Kp7`>=D=l
78I,Oaii#PbKn;RccOAVaii#PbKn;RccOAVaii#PbKn;RccOAVaii#PbKn;RccOAV`Q-/nTVIg?S!KG2
\@B)#^VIU8^Oa/o^])@Sqs=>$Cik(o:Kp7`>=D=l78I,V:Kp7`>=D=l78I,O78I,V:Kp7`>=D=l78I,V
:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l3C-:o4%(kd6o-nmVl6VH^VIU8^Oa/l^])^Kru+g@
B15U#78I,V:Kp7`>=D=l78I,V:Kp7`><YJO>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`
>=D=l78I,P85h<+6o-nm1HRu\4%-!FWe%q#^Oa.N^[])<lgk&rp%J)J:Kp7`>=D=l78I,V:Kp7`>=D=l
78I,V:Kp"O:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=;4i2*FGc4%(kd6o-nm
1HS"&W2bE`^qYH8J\U`irl>$:p&?&fhV^gu>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`><YJO>=D=l78I,V
:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l4%)h"4%(kd6o-nm1HRu\4%-!FWe%q#^Oa.N^[Al9
h=^dg_oKng:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp"O:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`
>=D=l78I,V:Kp.Y=#<!,1HRu\4%(kd6o-nm1HS"&W2bE`^qYH8J\UWfrk\U,q#;A8YI-ep>=D=l78I,V
:Kp7`>=D=l78I,V:Kp7`><YJO>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`><"l?1HRu\
4%(kd6o-nm1HRu\4%-*MXb"7&^Oa.N^[&Z6d.mV]P*hk1:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:KonL
:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,P85h<+6o-nm1HRu\4%(kd6o-nm>[_;s^V.C5
^Oa/`^]*KpruHE:M+(3E78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l4%2qL78I,V:Kp7`>=D=l78I,V:Kp7`
>=D=l78I,V:Kp4^=Z&?31HRu\4%(kd6o-nm1HRu_5";QQXb"7#^Oa.N^Z`H3`r>o8ruGN^F@Au078I,V
:Kp7`>=D=l78I,V:Kp7`>=D=l3(6VI78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:KonK:,=t"1HRu\
4%(kd6o-nm1HS!HGC4tV]"`g2J\U<]rn[SP*D07;78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,I78I,V
:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp1\=Yr601HRu\4%(kd6o-nm1HRuj7o6\)\:ME+^Oa.N^ZE60
_]\+)kXA9O78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,F78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V
:KoqM:GY(#1HRu\4%(kd6o-nm1HS!_Nfen-\%dL/J\U3Z+L\hn78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l
78I,V:KoSC:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Kp4^=Z&<11HRu\4%(kd6o-nm1HS!%='ts@J\S\/
J\QcNikHUqOH`..=[c+j78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l1.=uC78I,V:Kp7`>=D=l78I,V:Kp7`
>=D=l4[r7(4%(kd6o-nm1HRu\4%(kd7%p?NJ\SS,J\QcNikHU[H[n7K:dn/a78I,V:Kp7`>=D=l78I,V
:Kp7`>=D=l01AZ@78I,V:Kp7`>=D=l78I,V:Kp7`>=;4i2*FDb4%(kd6o-nm1HRu\4%*:]B7[h&^Oa.N
^Z*!NC2S,N4[qh7>")4k78I,V:Kp7`>=D=l78I,V:Kp7`>;&E@>=D=l78I,V:Kp7`>=D=l78I,V:KotO
;)::%1HRu\4%(kd6o-nm1HS!sTqd1RZ+kk)J\U3Z+J#*t1HRuf7SuTM>=D=l78I,V:Kp7`>=D=l78I,V
:KoA=:Kp7`>=D=l78I,V:Kp7`>=D=l6r$oC4\%:i6o-nm1HRu\4%(kd6s!W'J\SA&J\QcNhnL15?">fU
7mp*U78I,V:Kp7`>=D=l78I,V:Kp7`>:`3=>=D=l78I,V:Kp7`>=D=l78I,O7oD-)6o-nm1HRu\4%(kd
6o-nmS"61&^TP>&^Oa/W^E'u"]pP4XH@LZD<anKn>=D=l78I,V:Kp7`>=D=l.7I$:78I,V:Kp7`>=D=l
78I,V:KobB8M`Fr1HRu\4%(kd6o-nm;d!IY^T5,#^Oa/Q^])Lmp@n<n^Vb;GLdt<I78I,V:Kp7`>:E!:
>=D=l78I,V:Kp7`>=D=l6;1H:4%(kd6o-nm1HRu\4%(kd7$j=2J\S8#J\QcNf"_4Xqu7&kmdI6^[V0W+
78I,778I,V:Kp7`>=D=l78I,V:KoqM:GY(#1HRu\4%(kd6oR;"?tF,)^Snnu^Oa/N^]*-]rrV-<j!-ug
>=D=l78I,V:Kp7`>=D=l2EaPd4%(kd6r-ffK85Al[C1Y$V8%SrJ\TdNrlFR.)F[G+78I,V:Kp7`>=D=l
5Y>$44%(kd7$sI7J\R_iJ\QcNe%bnOo)BLp:Kp7`>=D=l78I,V:KokI9f"k!ASQ18^R;if^Oa/K^])pW
rte+">=D=l78I,V:Kp4^=u8?13C-6@Z*JqqRD4<fJ\T[Krkna6p&>^p:Kp7`>=D=l78I,P85h<+7!<m+
J\RMcJ\QcNd(fSFp&>^p:Kp7`>=D=l78I,J5ta!q7&6ZWJ\RMcJ\QcNd(fS0p&>Um:Kp7`>=D=l78I,E
4@MP,:k?BF^Oa.N^X0ap_tF$A78I,V:Kp7`><tk^1HS!?DfgQFPJ;[`J\TIErpoja&OfK"78I,V:KotO
:bt1$Pa7\f^QZE`^Oa/E^]*6frshIn>=D=l78I,I5Y<t!8,g&M^QZE`^Oa/E^])XUrshIn>=D=l6r$oB
4@NI^Aq@^Y^Oa.N^WjOm_Z'Q3rshIn>=D=l5Y>$44%+aWMh/X)^Oa.N^WO=jnGE4q78I,V:KoqM:GY(#
XfemZ^Q?3]^Oa/B^]*0grsM7k>=D=l3'^&.;-AIbNPC%ZJ\T@Brm1KA$Umiq6r$oB4%+18I=].m^Oa.N
^WO=j_>aE4rsM7k>=(ta1HS!rTV@"PNPC%ZJ\T7?rq-3i$Umiq5=e^96qk8+]n*qX^Oa.N^W4+glMgeh
78I,M78IK/Dh5Z\^Oa.N^W4+giVri_78I,K6;3E%P_$T,^Oa.N^W4+gfDbdU78I,J5t\Pn[Xl2N^Oa.N
^W4+gc2R_H78I,h>[r?"LVJDTJ\T7?rkna8"[c!dIY*<*^PBRT^Oa/<^]+$45Y>%TWN(NaLVJDTJ\T.<
rpTtf>\/K$KYN)QJ\T.<roO94L5^\uKYN)QJ\T.<rn[^ZYd8nqKYN)QJ\T.<rn@M'e'rr`KYN)QJ\T.<
rn.5"J\QlQJ\QcN`4u<$rm?;3KYN)QJ\T.<rmC_jJ\QlQJ\QcN`4u;srl]l-KYN)QJ\T.<rlb;^J\QlQ
J\QcN`4u;mrksB&KYN)QJ\T.<rl"fPJ\QlQJ\QcN`4u;frkX0#KYN)QJ\T.<rk\TPJ\QlQJ\QcN`4u;i
rlBZ*KYN)QJ\T.<rlG)^J\QlQJ\QcN`4u;prm$)0KYN)QJ\T.<rm(MjJ\QlQJ\QcN`4u<!rmcS7KYN)Q
J\T.<rmh##J\QlQJ\QcN`4u<(rnE"=KYN)QJ\T.<rnIG/J\QlQJ\QcN`4u<.roSdHKYN)QJ\T.<roX4L
J\QlQJ\QcN`4u<@rqV,[KYN)QJ\T.<rqZQnrkj<%LVJDTJ\T7?rkna8rr;uBJ\QuTJ\QcNa1qVurr;ut
rmu_9LVJDTJ\T7?rn%/Lrr;uVJ\QuTJ\QcNa1qW4rr;utrp#'LLVJDTJ\T7?rp'L_rr;uiJ\QuTJ\QcN
a1qWGrr;utrr)i4J\R)WJ\QcNb.mqlrr2osqu?ZAJ\R)WJ\QcNb.mr%qu?Qnrnr@BMSF_WJ\T@Bro!\R
qu?ZbJ\R)WJ\QcNb.mrFqu?Qnrr2o6J\R2ZJ\QcNc+j7prr2fpq#C?@J\R2ZJ\QcNc+j8*q#C-hro/LD
NPC%ZJ\TIEro3_Qq#C?aJ\R2ZJ\QcNc+j8Kq#C$erkj<%OM?@]J\TRHrknF/p&G$@J\R;]J\QcNd(fS0
p&F^brp#'LOM?@]J\TRHrp'1Vp&G$irkj<%PJ;[`J\T[Krkna6p&FU_rn2k;PJ;[`J\T[Krn6lBo)J^Y
J\RD`J\QcNe%bnOo)J1YrlBZ*QG8!cJ\TdNrlFR.n,NCEJ\RMcJ\QcNf"_4An,MkVrq:oXQG8!cJ\TdN
rq>g\m/R(1J\RVfJ\QcNft[O3m/QGPro\jIRD4<fJ\TmQro`YJm/R(arl9T)SA0WiJ\U!Trl>$;m/Q>M
roAXFSA0WiJ\U!TroE>Dl2Ub]rl'H'T>,rlJ\U*Wrl+m8l2ToGro/LDT>,rlJ\U*Wro3)?k5YGYrksB&
U;)8oJ\U3Zrl"g6k5XKArni:AU;)8oJ\U3Zrnlc9j8],Urkj<%V8%SrJ\U<]rkna4p&>Wuq"W_(il0!_
X0B!pR%JVRLuA=4h1<>;^Oa.N^ZE60h>[EpbKeLmOI1!3JQH5p78I,V:Kp7`>=D=l78I,V:KucWrquc8
J\S.uJ\QcNkeI,:rqucq*M&q'78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I.Ds8M86^Snnu^Oa/`^]*Kp
ruIZ)W'sKd78I,V:Kp7`>=D=l78I,V:Kp7`>=D=lgAh0!J\S8#J\QcNlbEGGq#;A*U8ULV>=D=l78I,V
:Kp7`>=D=l78I,V:Kp7`>MB,Vp&;dY^TP>&^Oa/f^])(Kp%\P-SYE&O:Kp7`>=D=l78I,V:Kp7`>=D=l
78I,V:KuHNrnW.?Y.oP&J\UWfrn[8I*M&q'78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I.>s8Mura+;"1
^Oa.N^[])<a8Z&1ruIZ)W'sKd78I,V:Kp7`>=D=l78I,V:Kp7`>=D=leGoO6J\SJ)J\QcNn\>(ho)B`$
U8ULV>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>LEKMdt,9@^Oa.N^\#;?e*m;WSYE&O:Kp7`>=D=l78I,V
:Kp7`>=D=l78I,V:Ku6Hrql]:J\S\/J\QcNpV6^Lrql0a*M&q'78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l
78I.5s8M]j_h#S6^Oa.N^\Y_E_uB>qruIZ)W'sKd78I,V:Kp7`>=D=l78I,V:Kp7`>=D=lbQ%S/rkO*"
]t]-5J\V/urkSO#l2McpU8ULV>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>KHjDj+4tY^Oa.N^\tqHj6$@^
SYE&O:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:Ktg<rn)e:^qYH8J\M3"rn-92*M&q'78I,V:Kp7`>=D=l
78I,V:Kp7`>=D=l78I.,s8N#sc@NaJ^Oa.P^B)X*!7(TCj8U-jU8ULV>=D=l78I,V:Kp7`>=D=l78I,V
:Kp7`>JgF>qYnNd^W+$>^P9N&`rZ&5!;bXR*M&q'78I,V:Kp7`>=D=l78I,V:Kp7`>=D=l78I.&s8MWh
_L]JD^Oa.V^])+Lo)\mkhu=^fU8ULV>=D=l78I,V:Kp7`>=D=l78I,V:Kp7`>J1"8li+\N^WaHD^Por,
_#EZts53hsSYE&O:Kp7`>=D=l78I,V:Kp7`>=D=l78I,V:KtC0rnr@BbeJ_DN5,AMq>]@P*M&q'78I,V
:Kp7`>=D=l78I,V:Kp7`>=D=l78I-rs8LQ"^X'ZG^Q6//eb9%#ruKG6eYK1JUoCPnWNW+sYGA/$UoCPn
WNW+sYGA/$[f?@*rlfr.d_C@JP/%"?rr)Qj_>gkArqQK3J\TaMJ\RJbrl+m3oDcZ,YlF^mrkX0#fY<!P
R(rX:rpfLX_>gY;rpg!,J\TsSJ\R\hrl+m,mJk$&WrN(nrlfr.hS4WVT"k9KrqPdY_>gG5rr)iHJ\U0Y
J\Rnnrmh#HkPrBuU&Y,MrkO*"kJ)S_Vn`5Hrnuc8_>g,,rp'L"J\UKbJ\S5"rke["hZ(FlS,`KZrl9T)
mD"4eXhXkUrq"nE_>fo&rqcW>J\U]hJ\SG(rm(N>f`/efQ2gj_rn)e:o=ojkZbQLlrr1IJ_>fSrro=!n
J\V#qJ\Sb1rkSNnci:i]N;rnErkj<%r4dft]YFH`rp@r0_>fAlrq694J\M6#^Oa/7^])@Sou[6Ms+^RQ
qu5&r^Oa/:^])^]qo8ZPs+11Ms8M?`a,%K]^W=1ha8YD?s2"_ds8DusrVkXP_2c9]^WsUn_>`9irOr6I
s+14Es8M]jd#l(o^X9gqd/N^Is2"_ds7--gl2J\h^Oa/O^])7Pl*:9)s+14<s8Mrqh>Y<_^Oa/U^]).M
h>[>Ts2"_ds60L^qu5LP`1t(u^Z3*.`;\Znql'P2s+140s8Mrqir6or^Oa/a^])4Oir8kMs2"_ds4mYR
rVkmWa037/^[Jr:a8Y0!rLEo(s+14$s8N#skPic7^Oa/m^])OXkPkIHs2"_ds3:TCpAWtKaM,E?^])"I
aSt)rp5T*gs+13gs8MNeg&An0^PBT'_uA?gn:^hXs+13as8MurlMf<4_pH/[^]).MeGeb4rIP"Js2"_d
s0D\(o)@YJdJh#<^RW(<_Z%s^ir8M"s763+s+13Ls8N#snG_AFci1cE^SnpH_>_d[i;W6Frdk+6s2"_d
s.02hrVlHglMf`@fDa%o_tq-Z^]).Mc2Q>oi;W$@o`"f?s5!^ks+13+s8Minn,VSOk2u["rnIG)rm^qp
rm(MdrlG)Wqn`9MrlG)^rm(Mjrm^r"rnIG/roX4LrqV-FaT'*VJ,
~> %APLeod
EI
Q
1 1 1 sc
q
231 32 m
231 15.430922 244.43144 2 261 2 c
277.56857 2 291 15.430922 291 32 c
291 48.568562 277.56857 62 261 62 c
244.43144 62 231 48.568562 231 32 c
h
W*
0 0 509 68 rc
226 67 m
296 67 l
296 -3 l
226 -3 l
h
f
Q
0.1 0.55000001 1 sc
q
261 57 m
274.80701 57 286 45.807003 286 32 c
286 18.192474 274.80701 7 261 7 c
247.19299 7 236 18.192474 236 32 c
236 45.807003 247.19299 57 261 57 c
h
261 50.5 m
250.78271 50.5 242.5 42.217281 242.5 32 c
242.5 21.782402 250.78271 13.5 261 13.5 c
271.21729 13.5 279.5 21.782402 279.5 32 c
279.5 42.217281 271.21729 50.5 261 50.5 c
h
W*
0 0 509 68 rc
231 62 m
291 62 l
291 2 l
231 2 l
h
f
Q
0.97000003 0.97000003 0.97000003 sc
q
261.12418 50.5 m
271.21713 50.5 279.5 42.21714 279.5 31.875839 c
279.5 21.782347 271.21713 13.5 261.12418 13.5 c
250.78287 13.5 242.5 21.782347 242.5 31.875839 c
242.5 42.21714 250.78287 50.5 261.12418 50.5 c
261.12418 50.5 l
h
W*
0 0 509 68 rc
237.5 55.5 m
284.5 55.5 l
284.5 8.5 l
237.5 8.5 l
h
f
Q
0.27058825 0.30980393 0.35686275 sc
q
257 37.427574 m
257 44.451614 l
257 45.306763 257.69324 46 258.5484 46 c
263.4516 46 l
264.30676 46 265 45.306763 265 44.451614 c
265 31.427576 l
265 31.153803 264.89124 30.891245 264.69766 30.697659 c
263.72992 29.729918 l
263.32678 29.326796 263.32678 28.673204 263.72992 28.270082 c
264.69766 27.302341 l
264.89124 27.108755 265 26.846197 265 26.572424 c
265 19.548388 l
265 18.693237 264.30676 18 263.4516 18 c
258.5484 18 l
257.69324 18 257 18.693237 257 19.548388 c
257 32.572426 l
257 32.846195 257.10876 33.108757 257.30234 33.302341 c
258.27008 34.270084 l
258.67322 34.673206 258.67322 35.326794 258.27008 35.729916 c
257.30234 36.697659 l
257.10876 36.891243 257 37.153805 257 37.427574 c
h
W*
0 0 509 68 rc
252 51 m
270 51 l
270 13 l
252 13 l
h
f
ep
end
%%Trailer
%%EOF
